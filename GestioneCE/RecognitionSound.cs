using NAudio.Wave;
using System;
using System.Linq;
using System.Numerics;

namespace GestioneCE
{
    class RecognitionSound
    {
        WaveIn wi = new WaveIn();
        public RecognitionSound()
        {
            // see what audio devices are available
            int devcount = WaveIn.DeviceCount;
            Console.Out.WriteLine("Device Count: {0}.", devcount);

            // get the WaveIn class started
            wi.DeviceNumber = 0;
            wi.WaveFormat = new WaveFormat(RATE, 1);
            wi.BufferMilliseconds = (int)((double)BUFFERSIZE / (double)RATE * 1000.0);

            // create a wave buffer and start the recording
            wi.DataAvailable += new EventHandler<WaveInEventArgs>(wi_DataAvailable);
            bwp = new BufferedWaveProvider(wi.WaveFormat);
            bwp.BufferLength = BUFFERSIZE * 2;

            bwp.DiscardOnBufferOverflow = true;
            wi.StartRecording();
        }

        public void Stop()
        {
            wi.StopRecording();
            wi.Dispose();
        }

        public double RangeRecognition = 0.80;

        public enum ResultRecognition
        {
            Null = 0,
            Accept = 1,
            Error = 2,
            Exist = 3,
        }

        private BufferedWaveProvider bwp;

        private readonly int RATE = 44100; // sample rate of the sound card
        private readonly int BUFFERSIZE = (int)Math.Pow(2, 11); // must be a multiple of 2

        private readonly double[] acceptSoundArray = new double[512] { 7.54, 7.8, 7.82, 7.85, 7.6, 6.13, 27.82, 19.3, 15.7, 45, 8.89, 15.31, 22.04, 14.05, 14.89, 12.57, 21.19, 16.21, 23.55, 27.45, 57.83, 62.1, 85.95, 23.75, 11.09, 6.03, 9.28, 5.28, 4.25, 6.88, 9.23, 1.72, 3.08, 6.56, 1.28, 1.22, 8.17, 6.05, 2.49, 9.26, 12.02, 19.74, 35.67, 397.69, 53.03, 25.36, 21.08, 15.24, 15.87, 13.79, 15.14, 11.82, 13.98, 12.23, 14.73, 20.87, 16.6, 20.34, 24.49, 31.56, 33.25, 38.28, 59.32, 95.08, 205.64, 447.58, 115.71, 62.82, 39.08, 32.96, 26.87, 18.68, 18.05, 13.96, 11.96, 12.04, 11.95, 11.52, 7.77, 11.61, 10.28, 11.15, 11.02, 10.54, 13.33, 15.9, 70.19, 18.13, 9.38, 9.57, 8.65, 6.6, 7.24, 8.9, 8.11, 11.43, 11.76, 12.16, 13.57, 15.62, 19.03, 19.61, 22.16, 28.53, 34.37, 47.01, 74.63, 168.01, 663.45, 107.15, 58.58, 41.02, 31.02, 22.44, 21.08, 16.56, 14.87, 11.99, 11.13, 10.02, 8.21, 9.18, 8.53, 14.08, 3.84, 8.49, 13.77, 23.01, 47.33, 191.91, 120.81, 49.45, 31.97, 24.78, 20.37, 18.04, 16.83, 13.88, 12.61, 12.76, 11.26, 10.63, 9.15, 8.68, 7.73, 12.91, 8.02, 7.02, 5.17, 5.06, 8.44, 164.67, 16.1, 10.68, 8.45, 8.52, 7.47, 8.18, 7.42, 6.55, 5.79, 6.3, 6.46, 5.45, 5.81, 5.24, 5.84, 4.11, 4.21, 5.33, 3.46, 4.84, 21.15, 28.78, 13.85, 10.57, 10.4, 15.24, 1.6, 3.98, 4.82, 4.44, 4.35, 4.62, 4.61, 4.58, 4.46, 4.34, 4.11, 4.59, 4.46, 4.61, 4.2, 3.97, 7.94, 3.86, 3.86, 3.89, 3.65, 1.51, 3.99, 3.92, 4.05, 3.74, 3.73, 3.58, 3.57, 3.65, 3.5, 3.53, 3.47, 3.46, 3.4, 3.38, 3.35, 3.27, 3.31, 3.22, 3.22, 3.17, 3.11, 3.21, 3.14, 3.1, 3.12, 3.07, 3.04, 3.03, 2.98, 2.98, 2.95, 2.93, 2.9, 2.91, 2.88, 2.86, 2.82, 2.8, 2.76, 2.77, 2.74, 2.74, 2.71, 2.73, 2.69, 2.66, 2.73, 2.63, 2.62, 2.61, 2.62, 2.6, 2.57, 2.58, 2.58, 2.53, 2.52, 2.5, 2.51, 2.48, 2.46, 2.45, 2.46, 2.45, 2.43, 2.42, 2.38, 2.37, 2.36, 2.35, 2.35, 2.32, 2.31, 2.32, 2.3, 2.31, 2.3, 2.29, 2.28, 2.25, 2.24, 2.22, 2.24, 2.22, 2.2, 2.18, 2.19, 2.17, 2.18, 2.28, 2.18, 2.14, 2.14, 2.15, 2.15, 2.13, 2.12, 2.11, 2.11, 2.08, 2.07, 2.08, 2.06, 2.07, 2.06, 2.05, 2.04, 2.04, 2.02, 2, 1.97, 2.04, 1.99, 1.99, 1.99, 1.97, 1.98, 1.96, 1.98, 1.95, 1.96, 1.94, 1.95, 1.94, 1.95, 1.92, 1.92, 1.9, 1.92, 1.91, 1.9, 1.9, 1.89, 1.89, 1.88, 1.86, 1.87, 1.86, 1.87, 1.84, 1.84, 1.82, 1.83, 1.81, 1.82, 1.76, 1.92, 1.84, 1.82, 1.81, 1.81, 1.81, 1.81, 1.81, 1.81, 1.79, 1.77, 1.77, 1.77, 1.78, 1.78, 1.76, 1.77, 1.76, 1.75, 1.75, 1.76, 1.74, 1.73, 1.74, 1.73, 1.74, 1.72, 1.73, 1.73, 1.7, 1.68, 1.71, 1.71, 1.71, 1.7, 1.72, 1.72, 1.68, 1.7, 1.68, 1.69, 1.69, 1.7, 1.61, 1.66, 1.64, 1.67, 1.66, 1.66, 1.63, 1.66, 1.65, 1.63, 1.64, 1.65, 1.63, 1.64, 1.61, 1.64, 1.65, 1.61, 1.65, 1.62, 1.63, 1.61, 1.64, 1.6, 1.62, 1.61, 1.62, 1.6, 1.62, 1.62, 1.59, 1.6, 1.6, 1.58, 1.58, 1.59, 1.58, 1.62, 1.58, 1.59, 1.59, 1.58, 1.58, 1.64, 1.58, 1.58, 1.58, 1.55, 1.56, 1.57, 1.57, 1.58, 1.58, 1.57, 1.58, 1.57, 1.55, 1.57, 1.56, 1.57, 1.55, 1.56, 1.55, 1.53, 1.55, 1.55, 1.55, 1.54, 1.53, 1.54, 1.54, 1.54, 1.53, 1.53, 1.56, 1.54, 1.53, 1.56, 1.52, 1.54, 1.55, 1.52, 1.56, 1.54, 1.53, 1.51, 1.51, 1.53, 1.52, 1.52, 1.55, 1.54, 1.53, 1.53, 1.54, 1.53, 1.53, 1.52, 1.53, 1.53, 1.53, 1.54, 1.52, 1.53, 1.52, 1.51, 1.5, 1.53, 1.51, 1.52, 1.5, 1.51, 1.49, 1.5, 1.51, 1.52, 1.54, 1.51, 1.51, 1.52, 1.52, 1.51, 1.49, };
        private readonly double[] errorSoundArray = new double[512] { 0.11, 0.1, 0.34, 1.78, 6.49, 14.89, 15.13, 29.54, 171.21, 53.05, 57.78, 27.61, 39.18, 80.9, 162.46, 97.01, 627.91, 15.29, 16.76, 164.04, 24.97, 19.37, 12.98, 42.47, 180.69, 44.54, 25.44, 11.64, 37.53, 80.02, 23.52, 14.38, 75.16, 42.68, 13.72, 6.61, 5.33, 6.17, 10.14, 11.5, 39.15, 12.15, 4.03, 0.83, 2.06, 3.94, 1.41, 1.17, 2.54, 1.4, 0.89, 1.57, 1.35, 2.26, 1.03, 0.35, 0.92, 1.36, 1.14, 0.65, 0.65, 0.54, 0.43, 0.66, 0.99, 0.56, 0.5, 0.5, 0.54, 0.51, 0.45, 0.42, 0.5, 0.42, 0.38, 0.43, 0.4, 0.36, 0.29, 0.33, 0.29, 0.38, 0.35, 0.31, 0.28, 0.32, 0.3, 0.26, 0.27, 0.31, 0.29, 0.25, 0.23, 0.25, 0.26, 0.24, 0.27, 0.24, 0.24, 0.26, 0.25, 0.2, 0.22, 0.2, 0.27, 0.23, 0.25, 0.22, 0.2, 0.21, 0.24, 0.21, 0.23, 0.21, 0.21, 0.18, 0.18, 0.22, 0.19, 0.18, 0.2, 0.18, 0.2, 0.21, 0.2, 0.16, 0.16, 0.18, 0.18, 0.18, 0.18, 0.17, 0.18, 0.18, 0.16, 0.19, 0.17, 0.19, 0.16, 0.17, 0.16, 0.14, 0.13, 0.15, 0.11, 0.14, 0.15, 0.15, 0.12, 0.16, 0.13, 0.15, 0.12, 0.13, 0.16, 0.16, 0.11, 0.14, 0.18, 0.15, 0.15, 0.13, 0.13, 0.14, 0.18, 0.15, 0.14, 0.12, 0.14, 0.13, 0.14, 0.11, 0.13, 0.11, 0.09, 0.13, 0.12, 0.15, 0.16, 0.12, 0.14, 0.1, 0.14, 0.15, 0.16, 0.14, 0.16, 0.11, 0.14, 0.16, 0.11, 0.11, 0.14, 0.14, 0.12, 0.13, 0.14, 0.14, 0.07, 0.11, 0.1, 0.12, 0.11, 0.12, 0.12, 0.12, 0.13, 0.14, 0.1, 0.1, 0.11, 0.09, 0.1, 0.1, 0.09, 0.08, 0.1, 0.11, 0.1, 0.09, 0.07, 0.09, 0.11, 0.11, 0.08, 0.09, 0.09, 0.11, 0.07, 0.09, 0.08, 0.09, 0.08, 0.1, 0.09, 0.09, 0.07, 0.09, 0.08, 0.09, 0.09, 0.08, 0.09, 0.12, 0.07, 0.08, 0.09, 0.05, 0.12, 0.08, 0.08, 0.08, 0.1, 0.09, 0.07, 0.1, 0.08, 0.07, 0.08, 0.09, 0.07, 0.08, 0.08, 0.08, 0.09, 0.05, 0.06, 0.09, 0.07, 0.09, 0.09, 0.07, 0.09, 0.08, 0.09, 0.08, 0.09, 0.08, 0.08, 0.09, 0.09, 0.09, 0.07, 0.08, 0.06, 0.07, 0.08, 0.09, 0.08, 0.06, 0.08, 0.08, 0.08, 0.07, 0.07, 0.1, 0.05, 0.06, 0.05, 0.07, 0.07, 0.08, 0.07, 0.07, 0.08, 0.05, 0.08, 0.08, 0.08, 0.07, 0.08, 0.07, 0.09, 0.06, 0.08, 0.07, 0.06, 0.06, 0.07, 0.07, 0.06, 0.06, 0.05, 0.05, 0.07, 0.06, 0.07, 0.07, 0.05, 0.07, 0.06, 0.08, 0.07, 0.05, 0.08, 0.06, 0.06, 0.07, 0.07, 0.08, 0.08, 0.07, 0.09, 0.07, 0.07, 0.07, 0.11, 0.06, 0.06, 0.06, 0.05, 0.08, 0.07, 0.07, 0.08, 0.07, 0.07, 0.06, 0.07, 0.05, 0.05, 0.06, 0.07, 0.08, 0.06, 0.07, 0.07, 0.07, 0.05, 0.07, 0.06, 0.06, 0.07, 0.05, 0.06, 0.07, 0.07, 0.06, 0.04, 0.06, 0.06, 0.06, 0.06, 0.05, 0.06, 0.06, 0.05, 0.07, 0.05, 0.05, 0.07, 0.05, 0.07, 0.05, 0.06, 0.06, 0.06, 0.06, 0.05, 0.04, 0.07, 0.06, 0.08, 0.07, 0.06, 0.08, 0.08, 0.07, 0.08, 0.05, 0.05, 0.06, 0.06, 0.03, 0.07, 0.06, 0.08, 0.05, 0.06, 0.05, 0.07, 0.07, 0.05, 0.06, 0.06, 0.05, 0.04, 0.05, 0.05, 0.04, 0.05, 0.06, 0.06, 0.05, 0.04, 0.08, 0.07, 0.05, 0.07, 0.06, 0.05, 0.07, 0.05, 0.08, 0.05, 0.06, 0.06, 0.07, 0.05, 0.04, 0.07, 0.07, 0.07, 0.03, 0.06, 0.05, 0.06, 0.05, 0.06, 0.05, 0.07, 0.05, 0.05, 0.05, 0.05, 0.06, 0.08, 0.04, 0.07, 0.07, 0.05, 0.07, 0.05, 0.07, 0.07, 0.05, 0.06, 0.06, 0.03, 0.04, 0.06, 0.06, 0.06, 0.07, 0.04, 0.07, 0.06, 0.04, 0.06, 0.05, 0.07, 0.05, 0.04, 0.05, 0.04, 0.07, 0.06, 0.04, 0.06, 0.04, 0.06, 0.05, 0.08, 0.06, 0.05, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.07, };
        private readonly double[] existSoundArray = new double[512] { 4.88, 5.13, 5.14, 4.89, 5.13, 4.68, 6.18, 11.6, 8.46, 6.15, 14.15, 3.89, 13.39, 12.48, 9.22, 18.24, 3.78, 21.86, 6.97, 24.05, 19.85, 22.63, 35.94, 17, 63.33, 8.08, 164.14, 340.86, 249.29, 71.9, 48.65, 45.02, 15.85, 33.61, 4.04, 25.08, 7.13, 17.7, 10.44, 11.36, 12.7, 5.94, 12.3, 1.18, 11.3, 2.96, 9.32, 5.49, 6.74, 6.96, 3.88, 7.69, 1.21, 7.32, 1.5, 6.58, 3.59, 4.86, 4.82, 3, 5.49, 1.08, 5.45, 0.85, 4.86, 2.36, 3.85, 3.53, 2.41, 4.1, 1.01, 4.27, 0.61, 3.93, 1.81, 3.2, 2.69, 2.2, 3.41, 1.03, 3.58, 0.25, 3.32, 1.26, 2.79, 2.24, 1.93, 2.78, 0.96, 2.98, 0.01, 2.79, 0.86, 2.28, 1.54, 1.65, 2.02, 0.92, 2.05, 0.62, 1.91, 0.83, 1.62, 1.16, 1.29, 1.44, 1.01, 1.51, 0.83, 1.47, 0.88, 1.3, 1.03, 1.12, 1.16, 0.95, 1.23, 0.88, 1.2, 0.85, 1.17, 0.95, 1.05, 1.03, 0.93, 1.05, 0.83, 1.07, 0.82, 1.03, 0.86, 0.97, 0.93, 0.84, 0.97, 0.8, 0.97, 0.81, 0.92, 0.83, 0.89, 0.87, 0.79, 0.93, 0.74, 0.89, 0.75, 0.86, 0.74, 0.84, 0.78, 0.81, 0.79, 0.74, 0.88, 0.69, 0.81, 0.76, 0.76, 0.76, 0.73, 0.77, 0.69, 0.77, 0.69, 0.7, 0.72, 0.71, 0.7, 0.72, 0.73, 0.68, 0.73, 0.64, 0.7, 0.68, 0.68, 0.65, 0.66, 0.69, 0.63, 0.67, 0.68, 0.66, 0.66, 0.67, 0.65, 0.65, 0.62, 0.65, 0.62, 0.64, 0.63, 0.65, 0.61, 0.62, 0.59, 0.61, 0.61, 0.6, 0.56, 0.61, 0.58, 0.6, 0.59, 0.58, 0.56, 0.57, 0.53, 0.59, 0.58, 0.57, 0.57, 0.6, 0.59, 0.57, 0.57, 0.54, 0.54, 0.57, 0.55, 0.56, 0.53, 0.57, 0.53, 0.54, 0.52, 0.54, 0.53, 0.54, 0.54, 0.52, 0.51, 0.53, 0.51, 0.51, 0.51, 0.54, 0.54, 0.52, 0.52, 0.52, 0.52, 0.51, 0.52, 0.49, 0.5, 0.49, 0.5, 0.49, 0.49, 0.49, 0.48, 0.51, 0.52, 0.48, 0.49, 0.47, 0.48, 0.5, 0.5, 0.47, 0.48, 0.45, 0.47, 0.46, 0.44, 0.48, 0.49, 0.48, 0.47, 0.44, 0.45, 0.46, 0.45, 0.47, 0.44, 0.46, 0.47, 0.45, 0.46, 0.47, 0.47, 0.44, 0.45, 0.45, 0.43, 0.45, 0.43, 0.45, 0.42, 0.45, 0.44, 0.45, 0.42, 0.41, 0.45, 0.42, 0.43, 0.42, 0.43, 0.42, 0.43, 0.41, 0.42, 0.42, 0.43, 0.4, 0.43, 0.45, 0.44, 0.44, 0.42, 0.44, 0.39, 0.43, 0.4, 0.41, 0.4, 0.42, 0.41, 0.41, 0.4, 0.39, 0.41, 0.4, 0.41, 0.4, 0.4, 0.41, 0.42, 0.41, 0.39, 0.4, 0.42, 0.4, 0.38, 0.39, 0.39, 0.39, 0.4, 0.39, 0.38, 0.4, 0.39, 0.39, 0.39, 0.4, 0.37, 0.38, 0.37, 0.4, 0.37, 0.39, 0.38, 0.4, 0.37, 0.39, 0.36, 0.36, 0.39, 0.36, 0.37, 0.37, 0.38, 0.38, 0.38, 0.36, 0.37, 0.39, 0.37, 0.39, 0.39, 0.37, 0.36, 0.36, 0.36, 0.36, 0.38, 0.36, 0.37, 0.38, 0.36, 0.36, 0.37, 0.38, 0.36, 0.36, 0.36, 0.34, 0.37, 0.36, 0.35, 0.35, 0.37, 0.36, 0.38, 0.37, 0.36, 0.37, 0.36, 0.37, 0.37, 0.37, 0.37, 0.37, 0.34, 0.36, 0.37, 0.35, 0.36, 0.36, 0.36, 0.36, 0.37, 0.35, 0.35, 0.33, 0.36, 0.38, 0.34, 0.36, 0.37, 0.37, 0.35, 0.34, 0.35, 0.37, 0.37, 0.36, 0.37, 0.36, 0.35, 0.35, 0.33, 0.35, 0.35, 0.37, 0.36, 0.34, 0.36, 0.34, 0.36, 0.35, 0.33, 0.34, 0.33, 0.34, 0.36, 0.35, 0.34, 0.35, 0.34, 0.35, 0.35, 0.36, 0.33, 0.33, 0.35, 0.33, 0.35, 0.33, 0.36, 0.33, 0.35, 0.32, 0.35, 0.36, 0.32, 0.34, 0.35, 0.34, 0.35, 0.36, 0.33, 0.33, 0.33, 0.36, 0.36, 0.33, 0.34, 0.35, 0.35, 0.35, 0.35, 0.35, 0.32, 0.32, 0.34, 0.33, 0.32, 0.34, 0.33, 0.34, 0.35, 0.33, 0.34, 0.33, 0.34, 0.35, 0.35, 0.33, 0.33, 0.35, 0.34, 0.34, 0.32, 0.33, 0.34, 0.32, 0.36, 0.34 };

        public ResultRecognition Recognition()
        {
            // read the bytes from the stream
            int frameSize = BUFFERSIZE;
            var frames = new byte[frameSize];
            bwp.Read(frames, 0, frameSize);
            if (frames.Length == 0) return ResultRecognition.Null;
            if (frames[frameSize - 2] == 0) return ResultRecognition.Null;

            // convert it to int32 manually (and a double for scottplot)
            int SAMPLE_RESOLUTION = 16;
            int BYTES_PER_POINT = SAMPLE_RESOLUTION / 8;
            Int32[] vals = new Int32[frames.Length / BYTES_PER_POINT];
            double[] Ys = new double[frames.Length / BYTES_PER_POINT];
            double[] Xs = new double[frames.Length / BYTES_PER_POINT];
            double[] Ys2 = new double[frames.Length / BYTES_PER_POINT];
            double[] Xs2 = new double[frames.Length / BYTES_PER_POINT];
            for (int i = 0; i < vals.Length; i++)
            {
                // bit shift the byte buffer into the right variable format
                byte hByte = frames[i * 2 + 1];
                byte lByte = frames[i * 2 + 0];
                vals[i] = (int)(short)((hByte << 8) | lByte);
                Xs[i] = i;
                Ys[i] = vals[i];
                Xs2[i] = (double)i / Ys.Length * RATE / 1000.0; // units are in kHz
            }
            Ys2 = FFT(Ys);

            double result = ComputeCoeff(acceptSoundArray, Ys2.Take(Ys2.Length / 2).ToArray());
            if (result > RangeRecognition)
                return ResultRecognition.Accept;

            result = ComputeCoeff(errorSoundArray, Ys2.Take(Ys2.Length / 2).ToArray());
            if (result > RangeRecognition)
                return ResultRecognition.Error;

            result = ComputeCoeff(existSoundArray, Ys2.Take(Ys2.Length / 2).ToArray());
            if (result > RangeRecognition)
                return ResultRecognition.Exist;

            return ResultRecognition.Null;
        }

        // adds data to the audio recording buffer
        private void wi_DataAvailable(object sender, WaveInEventArgs e)
        {
            bwp.AddSamples(e.Buffer, 0, e.BytesRecorded);
        }

        //Correlation of two arrays in C#
        private double ComputeCoeff(double[] values1, double[] values2)
        {
            if (values1.Length != values2.Length)
                throw new ArgumentException("values must be the same length");

            var avg1 = values1.Average();
            var avg2 = values2.Average();

            var sum1 = values1.Zip(values2, (x1, y1) => (x1 - avg1) * (y1 - avg2)).Sum();

            var sumSqr1 = values1.Sum(x => Math.Pow((x - avg1), 2.0));
            var sumSqr2 = values2.Sum(y => Math.Pow((y - avg2), 2.0));

            var result = sum1 / Math.Sqrt(sumSqr1 * sumSqr2);

            return result;
        }

        private double[] FFT(double[] data)
        {
            double[] fft = new double[data.Length]; // this is where we will store the output (fft)
            Complex[] fftComplex = new Complex[data.Length]; // the FFT function requires complex format
            for (int i = 0; i < data.Length; i++)
            {
                fftComplex[i] = new Complex(data[i], 0.0); // make it complex format (imaginary = 0)
            }
            Accord.Math.FourierTransform.FFT(fftComplex, Accord.Math.FourierTransform.Direction.Forward);
            for (int i = 0; i < data.Length; i++)
            {
                fft[i] = fftComplex[i].Magnitude; // back to double
                //fft[i] = Math.Log10(fft[i]); // convert to dB
            }
            return fft;
            //todo: this could be much faster by reusing variables
        }
    }
}
